package climat.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Annotation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AnnotationSection_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Constant_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new CustomScriptAction_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new InterpolationTemplatePiece_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new JavaScriptAction_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Parameter_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new RootToolchain_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ShellAction_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new StringTemplatePiece_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Toolchain_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ToolchainBody_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ToolchainSignature_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new InterpolationTemplatePiece_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab65dfe4dL), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab66288ffL), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab654f578L), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x17380d383ddf3596L), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655ab36L), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x17380d383dde6706L), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x5db90e988aaf5f1eL), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab654f56dL), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x5db90e988aad407bL), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655ab33L), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655c228L), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab6628906L), MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x5db90e988aaff613L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655ab36L)).seal();
}
