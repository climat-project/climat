package climat.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_Annotation;
  private ConceptPresentation props_AnnotationSection;
  private ConceptPresentation props_Constant;
  private ConceptPresentation props_CustomScriptAction;
  private ConceptPresentation props_InterpolationTemplatePiece;
  private ConceptPresentation props_JavaScriptAction;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_Referenceable;
  private ConceptPresentation props_RootToolchain;
  private ConceptPresentation props_ShellAction;
  private ConceptPresentation props_StringTemplatePiece;
  private ConceptPresentation props_TemplatePiece;
  private ConceptPresentation props_Toolchain;
  private ConceptPresentation props_ToolchainBody;
  private ConceptPresentation props_ToolchainSignature;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Action");
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.Annotation:
        if (props_Annotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Annotation = cpb.create();
        }
        return props_Annotation;
      case LanguageConceptSwitch.AnnotationSection:
        if (props_AnnotationSection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AnnotationSection");
          props_AnnotationSection = cpb.create();
        }
        return props_AnnotationSection;
      case LanguageConceptSwitch.Constant:
        if (props_Constant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Constant = cpb.create();
        }
        return props_Constant;
      case LanguageConceptSwitch.CustomScriptAction:
        if (props_CustomScriptAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CustomScriptAction");
          props_CustomScriptAction = cpb.create();
        }
        return props_CustomScriptAction;
      case LanguageConceptSwitch.InterpolationTemplatePiece:
        if (props_InterpolationTemplatePiece == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655ab36L, 0x5db90e988abe43d8L, "reference", "", "");
          props_InterpolationTemplatePiece = cpb.create();
        }
        return props_InterpolationTemplatePiece;
      case LanguageConceptSwitch.JavaScriptAction:
        if (props_JavaScriptAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JavaScriptAction");
          props_JavaScriptAction = cpb.create();
        }
        return props_JavaScriptAction;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.Referenceable:
        if (props_Referenceable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Referenceable = cpb.create();
        }
        return props_Referenceable;
      case LanguageConceptSwitch.RootToolchain:
        if (props_RootToolchain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RootToolchain = cpb.create();
        }
        return props_RootToolchain;
      case LanguageConceptSwitch.ShellAction:
        if (props_ShellAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ShellAction");
          props_ShellAction = cpb.create();
        }
        return props_ShellAction;
      case LanguageConceptSwitch.StringTemplatePiece:
        if (props_StringTemplatePiece == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StringTemplatePiece");
          props_StringTemplatePiece = cpb.create();
        }
        return props_StringTemplatePiece;
      case LanguageConceptSwitch.TemplatePiece:
        if (props_TemplatePiece == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TemplatePiece = cpb.create();
        }
        return props_TemplatePiece;
      case LanguageConceptSwitch.Toolchain:
        if (props_Toolchain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Toolchain = cpb.create();
        }
        return props_Toolchain;
      case LanguageConceptSwitch.ToolchainBody:
        if (props_ToolchainBody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ToolchainBody");
          props_ToolchainBody = cpb.create();
        }
        return props_ToolchainBody;
      case LanguageConceptSwitch.ToolchainSignature:
        if (props_ToolchainSignature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ToolchainSignature");
          props_ToolchainSignature = cpb.create();
        }
        return props_ToolchainSignature;
    }
    return null;
  }
}
