package climat.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class InterpolationTemplatePiece_Constraints extends BaseConstraintsDescriptor {
  public InterpolationTemplatePiece_Constraints() {
    super(CONCEPTS.InterpolationTemplatePiece$yu);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.reference$Vi1I, this, true, false) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:d1aec986-2bc6-4dc8-b77c-6e7a7ce84195(climat.constraints)", "6753445164544472090");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            Iterable<SNode> toolchains = SNodeOperations.ofConcept(SNodeOperations.getNodeAncestors(_context.getContextNode(), null, false), CONCEPTS.Toolchain$gj);
            final SNode self = SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.Referenceable$F9, false, false);
            return ListScope.forNamedElements(Sequence.fromIterable(SLinkOperations.collectMany(SLinkOperations.collect(toolchains, LINKS.signature$rLqw), LINKS.parameters$VltY)).concat(Sequence.fromIterable(SLinkOperations.collectMany(SLinkOperations.collect(toolchains, LINKS.body$pfVL), LINKS.constants$9eNv))).where((it) -> it != self));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept InterpolationTemplatePiece$yu = MetaAdapterFactory.getConcept(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655ab36L, "climat.structure.InterpolationTemplatePiece");
    /*package*/ static final SConcept Toolchain$gj = MetaAdapterFactory.getConcept(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655c228L, "climat.structure.Toolchain");
    /*package*/ static final SInterfaceConcept Referenceable$F9 = MetaAdapterFactory.getInterfaceConcept(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x5db90e988abe43d1L, "climat.structure.Referenceable");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink reference$Vi1I = MetaAdapterFactory.getReferenceLink(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655ab36L, 0x5db90e988abe43d8L, "reference");
    /*package*/ static final SContainmentLink signature$rLqw = MetaAdapterFactory.getContainmentLink(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655c228L, 0x5db90e988ab08ffeL, "signature");
    /*package*/ static final SContainmentLink parameters$VltY = MetaAdapterFactory.getContainmentLink(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x5db90e988aaff613L, 0x5db90e988aaff614L, "parameters");
    /*package*/ static final SContainmentLink body$pfVL = MetaAdapterFactory.getContainmentLink(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab655c228L, 0x572def6ab6628904L, "body");
    /*package*/ static final SContainmentLink constants$9eNv = MetaAdapterFactory.getContainmentLink(0x73bee2cc69694dd7L, 0xabeb6acc8e6703a8L, 0x572def6ab6628906L, 0x572def6ab6628908L, "constants");
  }
}
